#!/usr/bin/bash

# Author: Jakub Antonín Štigler (xstigl00)
# Project: ios - mole
# Date: 6.3. 2023
# supports the '-r' and '-d' flags
# to use ANSI escape codes define variable 'MOLE_USE_COLOR=yes'

# Config >>=============================================================
#echo "zakomentuj před odevzdáním!!"
#MOLE_RC=./test/MOLE_RC
#EDITOR=vim

#MOLE_USE_COLOR=yes # uncomment this to use ANSI escape codes

POSIXLY_CORRECT=yes


# Setup >>==============================================================

# define used colors
if [[ $MOLE_USE_COLOR = yes ]] ; then
    ESC=`printf "\e"`

    RESET="$ESC[0m"

    ITALIC="$ESC[3m"

    DARK="$ESC[90m"
    DGREEN="$ESC[32m"
    DYELLOW="$ESC[33m"

    RED="$ESC[91m"
    GREEN="$ESC[92m"
    YELLOW="$ESC[93m"
    WHITE="$ESC[97m"

    SIGNATURE="$ESC[38;2;250;50;170mx$ESC[38;2;240;50;180ms\
$ESC[38;2;230;50;190mt$ESC[38;2;220;50;200mi$ESC[38;2;210;50;210mg\
$ESC[38;2;200;50;220ml$ESC[38;2;190;50;230m0$ESC[38;2;180;50;240m0$ESC[0m"
else
    SIGNATURE="xstigl00"
fi

# error message
ERR="mole: ${RED}Error:$RESET"

# echo to stderr and exit
# echoe MSG ERROR_CODE
function echoe() {
    echo "$1" >&2
    exit $2
}

# get the MOLE_RC file
if [ -z ${MOLE_RC:+x} ] ; then
    echoe "$ERR MOLE_RC variable is not set" 1
fi
touch $MOLE_RC 2>/dev/null
EC=$?
if [[ $EC != 0 ]] ; then
    echoe "$ERR couldn't access file '$MOLE_RC'" $EC
fi

# checks if the given command exists
# check_installed COMMAND
function check_installed() {
    type "$1" &>/dev/null
    EC=$?
    if [[ $EC != 0 ]] ; then
        echoe "$ERR '$1' is not installed" $EC
    fi
}

# get the editor
EDI=${EDITOR:-${VISUAL:-vi}}
check_installed $EDI

# check if required utilities are installed
check_installed realpath
check_installed gawk
check_installed grep
check_installed sed
check_installed date
check_installed awk
check_installed bzip2


# Define functions >>===================================================

# Converts date to a number (exits on error)
function date_to_num() {
    # check for the basic format
    if [[ !("$1" =~ [0-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]) ]] ; then
        echoe "$ERR Invalid date format: '$1'. Expected the format YYYY-MM-DD"\
            1
    fi

    # convert from the format to seconds since epoch
    # stderr is redirected because the error message is handeled in the script
    RETURN=`date -d"$1" +%s 2>/dev/null`

    # return the error code on error
    EC=$?
    if [[ $EC != 0 ]] ; then
        echoe "$ERR Invalid date '$1'" $EC
    fi
}

# shows the help
function mole_help() {
    echo "Welcome in $GREEN${ITALIC}mole$RESET by $SIGNATURE

${GREEN}Usage:$RESET
  ${WHITE}mole -h$RESET
    Shows this help.

  ${WHITE}mole ${DARK}[-g GROUP] ${WHITE}FILE$RESET
    Opens the given FILE and adds it to the GROUP if -g is specified.

  ${WHITE}mole ${DARK}[-m] [FILTERS] [DIRECTORY]$RESET
    Opens file from the given DIRECTORY. FILTERS can change the range of files
    to look for. If the -m flag is specified, the file opened the most times is
    chosen. Otherwise the last opened file is chosen. The current directory is
    used when no DIRECTORY is specified.

  ${WHITE}mole ${YELLOW}list ${DARK}[FILTERS] [DIRECTORY]$RESET
    Lists all files edited by mole in the given DIRECTORY. FILTERS can change
    the range of files to list. The current directory is used when no DIRECTORY
    is specified.

${GREEN}Filters:$RESET
  $YELLOW-g ${WHITE}GROUP1${DARK}[,GROUP2[,...]]$RESET
    Filters only files that fall into any of the groups

  $YELLOW-a ${WHITE}DATE$RESET
    Filters out files opened before the given DATE

  $YELLOW-b ${WHITE}DATE$RESET
    Filters out files opened after the given DATE

${GREEN}DATE$RESET is in the format ${WHITE}YYYY-MM-DD$RESET"
}


# Process arguments >>==================================================

# get the action
case "$1" in
list)
    ACTION=list
    shift
    ;;
secret-log)
    ACTION=slog
    shift
    ;;
-h)
    mole_help
    if [ -z ${2:+x} ] ; then
        exit 0
    else
        echoe "$ERR -h doesn't take any other arguments" 1
    fi
    ;;
*)  ;;
esac

# get the flags
while getopts :g:mb:a:rd arg ; do
    case $arg in
    g)
        if [ "$DFLAG" ] ; then
            echoe "$ERR flags '-d' and '-g' are exclusive"
        fi
        GROUP="$OPTARG"
        ;;
    m)  MOST=true
        ;;
    b)
        date_to_num "$OPTARG"
        BEFORE=$RETURN
        ;;
    a)
        date_to_num "$OPTARG"
        AFTER=$RETURN
        ;;
    r)  RECURSIVE=yes ;;
    d)
        if [ "$GROUP" ] ; then
            echoe "$ERR flags '-d' and '-g' are exclusive"
        fi
        DFLAG=yes
        ;;
    *)
        echoe "$ERR invalid option '$OPTARG'" 1
        ;;
    esac
done

((OPTIND--))
shift $OPTIND

# the item to operate on (file or directory)
ITEM=`realpath "${1:-./}"`


# MOLE_RC Format:
# <filename>;,<group names followed by commas>,-,<dates separated by commas>
# full filename;,group1,group2,...,,-,date1,date2,...
# full filename2;,group1,group2,...,,-,date1,date2,...
# ...

# - <filename> cannot contain the character ';'
# - <group name> cannot contain the character ',' and cannot be '-'
# - <date> is number of seconds since Epoch
# - each file has its own line -> none of the fields can contain the
#   newline character
# - dates are always in order


# Script functions >>===================================================

# escapes the given string to be used in sed regex
# sed_escape STRING
function sed_escape() {
    sed -e 's/\\/\\\\/g' -e 's/\./\\./g' -e 's/\*/\\*/g' -e 's/\[/\\[/g' \
        -e 's/\//\\\//g' -e 's/\]/\\]/g' -e 's/\^/\\^/g' -e 's/\$/\\$/g' \
        -e 's/(/\\(/g'   -e 's/)/\\)/g' \
        <<__END__
$1
__END__
}

# escapes the given string to be used in grep regex
# grep_escape STRING
function grep_escape() {
    sed -e 's/\\/\\\\/g' -e 's/\./\\./g' -e 's/\*/\\*/g' -e 's/\[/\\[/g' \
                         -e 's/\]/\\]/g' -e 's/\^/\\^/g' -e 's/\$/\\$/g' \
        <<__END__
$1
__END__
}

# adds file to MOLE_RC if it doesn't exist with the current date
# rc_add_file FILENAME GROUP
# Set GROUP to '-' for no group
function rc_add_file() {
    # escape for use in regex
    _FNAME_S=`sed_escape $1`
    _FNAME_G=`grep_escape $1`
    _GROUP_S=`sed_escape $2`
    _GROUP_G=`grep_escape $2`

    # check if the file is in the MOLE_RC
    _COUNT=`grep -c "^$_FNAME_G;,.*$" "$MOLE_RC"`
    # current date and time
    _TIME=`date +%s`

    # file not in MOLE_RC
    if [[ $_COUNT == 0 ]] ; then
        if [[ $2 == "-" ]] ; then
            echo "$1;,,-,$_TIME" >>"$MOLE_RC"
        else
            echo "$1;,$2,,-,$_TIME" >>"$MOLE_RC"
        fi
        return
    fi

    # file is in MOLE_RC
    if [[ $2 == "-" ]] ; then
        # add time to the file
        sed -r -i "s/^$_FNAME_S;,.*$/\0,$_TIME/" "$MOLE_RC"
        return
    fi

    # check if the file already has the group
    COUNT=`grep -c "^$_FNAME_G;.*,$_GROUP_G,.*,-,.*" "$MOLE_RC"`
    if [[ $COUNT == 0 ]] ; then
        # add the group
        sed -r -i "s/^($_FNAME_S;,.*),-,(.*)$/\1$_GROUP_S,,-,\2,$_TIME/" \
            "$MOLE_RC"
    else
        # add only the time
        sed -r -i "s/^$_FNAME_S;,.*$/\0,$_TIME/" "$MOLE_RC"
    fi
}

# gets all the files directly in the given directory (from stdin)
# files_in_dir DIRECTORY
function files_in_dir() {
    _DIR=`grep_escape $1`
    if [ $RECURSIVE ] ; then
        grep -e "^$_DIR/.*$" -
    else
        grep -e "^$_DIR/[^/]*;,.*$" -
    fi
}

# gets all the files edited before the given date (from stdin)
# files_before DATE
function files_before() {
    gawk "match(\$0, /^.*;.*,-,([^,]*).*$/, a) && a[1] <= $1"
}

# gets all the files edited after the given date (from stdin)
# files_after DATE
function files_after() {
    gawk "match(\$0, /^.*,([^,]*)$/, a) && a[1] >= $1"
}

# creates filter for all the files in one of the groups
# files_in_group GROUPS
function files_in_groups() {
    awk 'BEGIN {
        gcount = split("'$1'", groups, ",");
    }

    match($0, /^.*;,(.*),,-,.*$/, a) {
        glen = split(a[1], gs, ",");
        for (i = 1; i <= glen; i++) {
            for (j = 0; j <= gcount; j++) {
                if (gs[i] == groups[j]) {
                    print $0;
                    next;
                }
            }
        }
    }'
}

# gets all the files that don't have any group
# files_not_in_group
function files_not_in_group() {
    grep "^.*;,,-,.*$" -
}

# returns command that filters the files
# get_filters
function get_filters() {
    # create the command by piping filters
    # Why I use '! -z' instead of '-n'? Because '-n' doesn't work!!
    if [ ! -z ${GROUP:+x} ] ; then
        _COMMAND="$_COMMAND | files_in_groups $GROUP"
    elif [[ $DFLAG == yes ]] ; then
        _COMMAND="$_COMMAND | files_not_in_group"
    fi
    if [ ! -z ${BEFORE:+x} ] ; then
        _COMMAND="$_COMMAND | files_before $BEFORE"
    fi
    if [ ! -z ${AFTER:+x} ] ; then
        _COMMAND="$_COMMAND | files_after $AFTER"
    fi
    echo "$_COMMAND"
}

# formats the files given in stdin to stdout
# list_files
function list_files() {
    gawk 'BEGIN {
        count = 0;
        max_len = 0;
    }

    match($0, /(.*);,(.*),-,.*/, a) {
        names[count] = a[1]":";

        # get group or the - character
        l = length(a[2]);
        if (l == 0)
            g = "-";
        else
            g = substr(a[2], 0, l - 1);

        # sort the group
        split(g, gspl, ",");
        n = asort(gspl);
        g = "";
        for (i = 1; i <= n; i++) {
            if (i != 1)
                g = g ",";
            g = g gspl[i];
        }

        grps[count] = g;

        # find the longest filename
        l = length(a[1]);
        if (l > max_len)
            max_len = l;

        count++;
    }

    END {
        # print all the files with the correct padding
        max_len++;
        for (i = 0; i < count; i++) {
            printf "%-"max_len"s %s\n", names[i], grps[i]
        }
    }'
}

# formats the files from stdin to secret log to stdout
# get_secret_log
function get_secret_log() {
    gawk 'match($0, /(.*);,.*,-,(.*)/, a) {
        # print the filename
        printf "%s", a[1];

        n=split(a[2], times, ",");
        for (i = 1; i <= n; i++) {
            # convert to the correct datetime format
            ftime = strftime("%Y-%m-%d_%H-%M-%S", times[i]);
            printf ";%s", ftime;
        }
        printf "\n"
    }'
}

# sorts the files in the stdin by the last used and outputs only filenames
# sort_by_last_used
function sort_by_last_used() {
    sed -r 's/^(.*);,.*,([^,]*)$/\2:\1/' \
        | sort -r -t: -k1 -n \
        | sed -r 's/^[^:]*:(.*)$/\1/'
}

# sorts the files based on how often they were open
# sort_by_count_opened
function sort_by_count_opened() {
    gawk 'match($0, /^(.*);,.*,-,(.*)$/, a) {
        n = split(a[2], spl, ",");
        print n ":" a[1];
    }'  | sort -r -t: -k1 -n \
        | sed -r 's/^.*:(.*)$/\1/'
}

# gets the first existing file (from stdin to stdout)
# get_first_existing
function get_first_existing() {
    gawk '{
        if (system("[ -f '"'"'" $0 "'"'"' ]") == 0) {
            print $0;
            exit;
        }
    }'
}

# The script >>=========================================================

case "$ACTION" in
list)
    # check for invalid arguments
    if [ $2 ] ; then
        echoe "$ERR too many arguments" 1
    fi
    if [ $MOST ] ; then
        echoe "$ERR cannot use the '-m' flag with list" 1
    fi
    if [ ! -d $ITEM ] ; then
        echoe "$ERR '$ITEM' is not a directory" 1
    fi

    COMMAND="cat $MOLE_RC | files_in_dir $ITEM"`get_filters`

    eval "$COMMAND" | list_files | sort
    ;;
slog)
    # check for invalid arguments
    if [ $MOST ] ; then
        echoe "$ERR cannot use the '-m' flag with secret-log" 1
    fi
    if [ $GROUP ] ; then
        echoe "$ERR cannot use the '-g' flag with secret-log" 1
    fi

    # add patterns to grep to match all the directories
    COMMAND="cat $MOLE_RC | grep"
    for arg in "${@:-./}"
    do
        DIR=`realpath $arg`
        DIR=`grep_escape $DIR`
        if [ $RECURSIVE ] ; then
            COMMAND="$COMMAND -e '^$DIR/.*$'"
        else
            COMMAND="$COMMAND -e '^$DIR/[^/]*;.*$'"
        fi
    done

    # filter dates
    COMMAND="$COMMAND"`get_filters`

    # create the folder in case it doesn't exist
    mkdir -p ~/.mole

    # evaluate the command and compress the log
    LOG=`eval "$COMMAND" | get_secret_log | sort`
    if [ ! "$LOG" ] ; then
        echoe "$ERR There are no files in that directories. No log created" 1
    fi

    bzip2 >~/.mole/log_$USER_`date +%Y-%m-%d_%H-%M-%S`.bz2 <<__END__
$LOG
__END__
    ;;
*)
    if [ $2 ] ; then
        echoe "$ERR too many arguments" 1
    fi

    # open and edit file
    if [ -f $ITEM ] ; then
        # check for invalid arguments for this action
        if [ -n "${MOST:+x}" ] ; then
            echoe "$ERR invalid flag when opening file: -m" 1
        elif [ -n "${BEFORE:+x}" ] ; then
            echoe "$ERR invalid flag when opening file: -b" 1
        elif [ -n "${AFTER:+x}" ] ; then
            echoe "$ERR invalid flag when opening file: -a" 1
        fi

        rc_add_file $ITEM ${GROUP:--}
        $EDI $ITEM
        exit $?
    fi

    # directory
    if [ ! -d $ITEM ] ; then
        echoe "$ERR '$ITEM' deoesn't exist" 1
    fi

    COMMAND="cat $MOLE_RC | files_in_dir $ITEM"`get_filters`

    # select the file
    if [ ${MOST} ] ; then
        FILE=`eval $COMMAND | sort_by_count_opened | get_first_existing`
    else
        FILE=`eval $COMMAND | sort_by_last_used | get_first_existing`
    fi

    if [ ! "$FILE" ] ; then
        echoe "$ERR no file matches the filters" 1
    fi

    # open the file
    rc_add_file $FILE -
    $EDI $FILE
    exit $?
    ;;
esac
